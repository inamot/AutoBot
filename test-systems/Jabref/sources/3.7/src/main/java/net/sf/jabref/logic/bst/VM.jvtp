 bibtex virtual machine execute  bst files  
   
   documentation found original bibtex distribution  
   
   https   www ctan org pkg bibtex 
   
    
    
           pops top two  integer  literals  compares pushes integer 1 second greater first  0 
           otherwise  
            
    analogous     
    
           pops top two  both integer both string  literals  compares pushes integer 1 re equal  0 otherwise  
            
    pops top two  integer  literals pushes sum     
    
           pops top two  integer  literals pushes difference first subtracted second   
            
    
           pops top two  string  literals  concatenates reverse 
           order order pushed pushes resulting string  
            
    
           pops top two literals assigns first must global entry variable value second  
            
    
           pops top  string  literal  adds last non 
           ' ' character isn't pushes resulting 
           string  
            
    
           executes function whose name entry type entry example entry type book function executes book function given argument iterate 
           command  call type$ actually produces output entries entry unknown type executes function 
           default type  thus define  before read command  
           one function each standard entry type well default type function  
            
    
           pops top  string  literal  makes sure s single 
           character  converts corresponding ascii integer pushes integer  
            
    
           pushes string cite-command argument entry  
            
    
           pops top literal stack pushes two copies pops top literal pushes integer 1 s missing 
           field string having non-white-space characters  0 
           otherwise  
            
    
           pops top three literals two function literals integer literal order integer greater 0 executes second literal executes first  
            
    
           pops top  integer  literal  interpreted ascii integer 
           value single character  converts corresponding 
           single-character string pushes string  
            
    
           pops top  integer  literal  converts unique  
           string equivalent pushes string  
            
    
           pops top literal pushes integer 1 s missing 
           field  0 otherwise  
            
    
           writes onto bbl file accumulated output buffer writes blank line only output buffer empty write reasonable line breaking use function only want blank line explicit line 
           break  
            
    
           pops top  string  literal pushes number names string represents one plus number occurrences substring ignoring case differences  surrounded non-null white-space top brace level  
            
    
           pops top stack doesn't print gets rid unwanted stack literal built_in  function  \  preamble\$   pushes onto stack concatenation preamble  strings read database files empty string none  
           
            preamble strings read database files  
            
    
           pops top  string  literal  removes nonalphanumeric characters 
           except white-space characters hyphens ties converted space   removes certain alphabetic characters 
           contained control sequences associated special 
           character pushes resulting string  
            
    
           pushes string consisting double-quote character op  
            
   nothing yeah  
    
           pops prints whole stack s meant used style 
           designers debugging  
            
    
           pops top three literals two integers literals 
           len start string literal order pushes substring most  len consecutive characters 
           starting startth character  assuming 1-based indexing start positive ending start-th character 
            including end start negative first 
           character end last character   
            
    
           swaps top two literals stack  text length$ pops top  string  literal pushes number text characters contains accented character precisely special character   defined section 4  counts single 
           text character  even s missing matching right brace braces don't count text characters  
            
    
           text length$ pops top  string  literal pushes number text characters contains accented character precisely special character   defined section 4  counts single text character  even s missing matching right 
           brace braces don't count text characters bibtexing purposes counting letters labels  
           bibtex considers everything contained inside braces single letter  
            
    
           pops top two literals integer literal len string 
           literal order pushes substring most  len 
           consecutive text characters starting beginning string function similar substring one 
           considers special character   even s missing matching 
           right brace single text character many 
           ascii characters actually comprises function doesn't 
           consider braces text characters  furthermore function 
           appends any needed matching right braces  
            
    
           pops prints top stack log file s useful debugging  
            
    
           pushes current entry's type  book  article  etc pushes null string type either unknown undefined  
            
    
           pops top  string  literal prints following warning 
           message increments count number warning 
           messages issued  
            
    
           pops top two  function  literals keeps executing second long integer  literal left stack executing first greater 0  
            
    
           pops top  string  literal writes output buffer result stuff being written onto bbl file buffer fills up   
            
   comments bibtex web  
   sp_ptr    str_start pop_lit1   
   sp_end    str_start pop_lit1 1   
   sp_brace_level    0 sp_ptr   sp_end begin 
   incr sp_ptr str_pool sp_ptr-1    left_brace begin 
   incr sp_brace_level sp_brace_level   1 sp_ptr   sp_end str_pool sp_ptr    backslash begin 
   incr sp_ptr    skip over backslash   
   skip over backslash sp_ptr   sp_end sp_brace_level 
     0 begin str_pool sp_ptr    right_brace decr sp_brace_level  
   incr sp_brace_level   
   incr sp_ptr   
   end  
   incr num_text_chars   
   end  
   end str_pool sp_ptr-1    right_brace begin sp_brace_level   0 decr sp_brace_level   
   end incr num_text_chars   
   reset 
   create entries 
   go 
    
       dredges up database file field values each entry list arguments database entry doesn't value field probably database entry value every field field variable marked missing entry use null missing entry designator  
        
    
       defines string macro two arguments first macro's 
       name treated any variable function name second definition must double-quote-delimited must one each three-letter month abbreviation addition one common journal names user's database may 
       override any definition define using command want define string user t touch  use function command compatible syntax  
       
        param child 
        
   
       declares fields entry variables three arguments  each possibly empty  list variable names three lists fields  
       integer entry variables string entry variables additional field bibtex automatically declares  crossref  used cross referencing additional string entry variable 
       automatically declared  sort key$  used sort command  each variables value each entry list  
        
   fields first 
   integers 
   strings 
    
       sorts entry list using values string entry variable sort key arguments  
        
   ok null context 
    
       declares global integer variables one argument list variable names two automatically-declared variables  
       entry max global max$  used limiting lengths string vari- 
       ables may any number commands variable's 
       declaration must precede use  
       
        param child 
        
    
       declares global string variables one argument list variable 
       names may any number commands variable's 
       declaration must precede use  
       
        param child 
       net sf jabref logic bst VM net sf jabref logic bst vm warn integer 0 integer 1 identifier name identifier name name   name getname name variable name variable name name   name getname name  
          
      
 
     functionalinterface bstfunction execute bstentry context vm file f recognitionexception  ioexception antlrfilestream f getpath file   f vm s recognitionexception antlrstringstream s vm charstream bst recognitionexception vm charstream2commontree bst vm commontree tree tree   tree buildinfunctions hashmap   37   
 
          
        buildinfunctions put      context stack size     2 vmexception  not enough operands on stack operation      
              
            object o2   stack pop    
            object o1   stack pop o1 integer      o2 integer vmexception  can only compare two integers with      
              
 
            stack push   integer  o1  compareto  integer  o2    0 ? vm vm buildinfunctions put      context stack size     2 vmexception  not enough operands on stack operation      
              
            object o2   stack pop    
            object o1   stack pop o1 integer      o2 integer vmexception  can only compare two integers with      
              
 
            stack push   integer  o1  compareto  integer  o2    0 ? vm vm buildinfunctions put      context stack size     2 vmexception  not enough operands on stack operation      
              
            object o1   stack pop    
            object o2   stack pop o1 o2 stack push vm o1 o2 stack push vm stack push o1 equals o2  ? vm vm buildinfunctions put      context stack size     2 vmexception  not enough operands on stack operation      
              
            object o2   stack pop    
            object o1   stack pop o1 integer      o2 integer vmexception  can only compare two integers with      
              
 
            stack push  integer  o1    integer  o2   
            
 
          
        buildinfunctions put  -   context stack size     2 vmexception  not enough operands on stack operation -    
              
            object o2   stack pop    
            object o1   stack pop o1 integer      o2 integer vmexception  can only subtract two integers with -    
              
 
            stack push  integer  o1 -  integer  o2   
            
 
          
        buildinfunctions put      context stack size     2 vmexception  not enough operands on stack operation      
              
            object o2   stack pop    
            object o1   stack pop o1 o2 vmexception  can only concatenate two with      
              
 
            stack push o1 tostring     o2   
            
 
          
        buildinfunctions put       context stack size     2 vmexception  invalid call to operation       
              
            object o1   stack pop    
            object o2   stack pop    
            assign context  o1  o2   
            
 
          
        buildinfunctions put  add period$   context -  addperiodfunction     
 
          
        buildinfunctions put  call type$   context context vmexception  call type$ can only be called from within a context  iterate or reverse      
              
            vm execute context getbibtexentry   gettype    context   
            
 
        buildinfunctions put  change changecasefunction buildinfunctions put  chr to context stack isempty vmexception  not enough operands on stack operation chr to object o1   stack pop o1 string  o1  length      1 vmexception  can only perform chr to on with length 1 s o1  
 
            stack push s charat 0    
            
 
          
        buildinfunctions put  cite$   context context vmexception  must have an entry to cite$    
              
            stack push context getbibtexentry   getcitekeyoptional   orelse buildinfunctions put  duplicate$   context stack isempty vmexception  not enough operands on stack operation duplicate$    
              
            object o1   stack pop    
 
            stack push o1   
            stack push o1   
            
 
          
        buildinfunctions put  empty$   context stack isempty vmexception  not enough operands on stack operation empty$    
              
            object o1   stack pop o1 stack push vm o1 vmexception  operand does not match function empty s o1  
 
            stack push    equals s trim    ? vm vm buildinfunctions put  format name formatnamefunction buildinfunctions put context stack size     3 vmexception  not enough operands on stack operation      
              
            object f1   stack pop    
            object f2   stack pop    
            object i   stack pop f1 identifier      f1 tree   
                         f2 identifier      f2 tree       i integer vmexception  expecting two functions and an integer if   integer  i   0    
                vm executeincontext f2  context vm executeincontext f1  context   
              
            
 
          
        buildinfunctions put to chr$   context stack isempty vmexception  not enough operands on stack operation to chr$    
              
            object o1   stack pop o1 integer vmexception  can only perform operation to chr$ on an integer    
              
 
            integer i    integer  o1  
 
            stack push valueof i intvalue      
            
 
          
        buildinfunctions put to str$   context stack isempty vmexception  not enough operands on stack operation to str$    
              
            object o1   stack pop o1 integer vmexception  can only transform an integer to an using to str$    
              
 
            stack push o1 tostring     
            
 
          
        buildinfunctions put  missing$   context stack isempty vmexception  not enough operands on stack operation missing$    
              
            object o1   stack pop o1 stack push vm o1 warn  not a or missing field in operation missing$    
                stack push vm stack push vm buildinfunctions put  newline$   context -  vm bbl append '\n'    
 
          
        buildinfunctions put  num names$   context stack isempty vmexception  not enough operands on stack operation num names$    
              
            object o1   stack pop o1 vmexception  need a at the top of the stack num names s o1  
 
            stack push authorlist parse s  getnumberofauthors     
            
 
          
        buildinfunctions put  pop$   context -  stack pop     
 
          
        buildinfunctions put  preamble$   context -    
            stack push preamble   
            
 
          
        buildinfunctions put  purify purifyfunction buildinfunctions put  quote$   context -  stack push  \      
 
          
        buildinfunctions put  skip$   context -    
                  
            
 
          
        buildinfunctions put  stack$   context stack empty      
                logger debug stack pop     
              
            
 
 
          
        buildinfunctions put  substring$   context -  substringfunction     
 
          
        buildinfunctions put  swap$   context stack size     2 vmexception  not enough operands on stack operation swap$    
              
            object f1   stack pop    
            object f2   stack pop    
 
            stack push f1   
            stack push f2   
            
 
          
        buildinfunctions put  text length$   context -  textlengthfunction     
 
          
        buildinfunctions put  text prefix textprefixfunction buildinfunctions put  top$   context -  logger debug stack pop      
 
          
        buildinfunctions put  type$   context context vmexception  type$ need a context     
              
 
            stack push context getbibtexentry   gettype     
            
 
          
        buildinfunctions put  warning bstfunction warning   1  
 
             override execute bstentry context    
                logger warn  warning  #     warning              stack pop     
              
            
 
          
        buildinfunctions put whilefunction   
 
        buildinfunctions put  width widthfunction buildinfunctions put  write$   context s stack pop    
            vm bbl append s textlengthfunction stack isempty vmexception  not enough operands on stack operation text length$    
          
        object o1   stack pop o1 vmexception  can only perform operation on a text length s o1 c   s tochararray result   0 i   0 n   s length bracelevel   0 i   n    
              
            i c i - 1     ' '    
                  
                bracelevel bracelevel    1      i   n c i     '\\'    
                          
                        i i   n      bracelevel   0 c i     ' '    
                                  
                                bracelevel c i     ' '    
                                  
                                bracelevel    
                              
                              
                            i    
                              
                          
                          
                        result c i - 1 bracelevel   0    
                      
                    bracelevel result    
              
          
        stack push result whilefunction bstentry context stack size     2 vmexception  not enough operands on stack operation object f2   stack pop    
        object f1   stack pop f1 identifier      f1 tree   
                     f2 identifier      f2 tree vmexception  expecting two functions vm executeincontext f1  context   
 
            object i   stack pop i integer vmexception  first parameter to has to an integer but was     i integer  i    0 vm executeincontext f2  context substringfunction stack size     3 vmexception  not enough operands on stack operation substring$    
          
        object o1   stack pop    
        object o2   stack pop    
        object o3   stack pop o1 integer      o2 integer      o3 vmexception  expecting two integers and a substring$    
          
 
        integer len    integer  o1  
        integer start    integer  o2 leni   len starti   start leni    integer max_value   2     
            leni   integer max_value   2 starti    integer max_value   2     
            starti   integer max_value   2 starti    integer min_value   2     
            starti   -integer min_value   2 s o3 starti   0    
            starti    s length     1  
            starti   math max 1   starti   1  - leni   
          
        stack push s substring starti - 1  math min  starti - 1    leni  s length addperiodfunction stack isempty vmexception  not enough operands on stack operation add period$    
          
        object o1   stack pop o1 vmexception  can only add a period to a add period s o1  
        matcher m   add_period_pattern matcher s m find      
            stringbuffer sb stringbuffer    
            m appendreplacement sb  m group 1    
            sb append group2   m group 2 group2 sb append m group 2    
              
            stack push sb tostring stack push s commontree charstream2commontree charstream bst recognitionexception   
        bstlexer lex bstlexer bst   
        commontokenstream tokens commontokenstream lex   
        bstparser parser bstparser tokens   
        bstparser program_return r   parser program commontree  r gettree assign bstentry context  object o1  object o2 o1 identifier        o2 o2 integer vmexception  invalid parameters name     identifier  o1  getname o2 context context localstrings containskey name     
                context localstrings put name o2 strings containskey name     
                strings put name o2 context context localintegers containskey name     
            context localintegers put name   integer  o2 integers containskey name     
            integers put name   integer  o2 run bibdatabase db    
        preamble   db getpreamble   orelse run db getentries run collection bibentry  bibtex    
 
          
        bbl stringbuilder    
 
        strings hashmap      
 
        integers hashmap      
        integers put  entry max$   integer max_value   
        integers put  global max$   integer max_value   
 
        functions hashmap      
        functions putall buildinfunctions   
 
        stack stack      
 
          
        entries arraylist   bibtex size     
        listiterator bstentry  listiter   entries listiterator bibentry entry   bibtex    
            listiter add bstentry entry i   0  i   tree getchildcount    i      
            tree child   tree getchild i child gettype bstparser strings  
                strings child bstparser integers  
                integers child bstparser function  
                function child bstparser execute  
                execute child bstparser sort  
                sort bstparser iterate  
                iterate child bstparser reverse  
                reverse child bstparser entry  
                entry child bstparser read  
                read bstparser macro  
                macro child logger info  unknown type      child gettype bbl tostring read bstentry e   entries map entry string  mentry   e getfields   entryset fieldvalue   e getbibtexentry   getfield mentry getkey    orelse mentry setvalue fieldvalue bstentry e   entries e getfields   containskey fieldname crossref     
                e getfields   put fieldname crossref macro tree child name   child getchild 0  gettext replacement   child getchild 1  gettext    
        functions put name macrofunction replacement macrofunction bstfunction macrofunction replacement replacement   replacement  
          
 
         override execute bstentry context    
            vm push replacement entry tree child    
          
        tree t   child getchild 0 i   0  i   t getchildcount    i name   t getchild i  gettext bstentry entry   entries    
                entry getfields   put name t   child getchild 1 i   0  i   t getchildcount    i name   t getchild i  gettext bstentry entry   entries    
                entry localintegers put name  0   
              
          
          
        t   child getchild 2 i   0  i   t getchildcount    i name   t getchild i  gettext bstentry entry   entries    
                entry localstrings put name bstentry entry   entries    
            entry localstrings put  sort key reverse tree child    
 
        bstfunction f   functions get child getchild 0  gettext     
 
        listiterator bstentry  i   entries listiterator entries size i hasprevious      
            f execute i previous iterate tree child    
        bstfunction f   functions get child getchild 0  gettext bstentry entry   entries    
            f execute entry sort     
        collections sort entries   o1  o2  -   o1 localstrings get  sort key$    
                 compareto o2 localstrings get  sort key executeincontext object o  bstentry context o tree    
            tree t    tree  o stackfunction t  execute context o identifier    
            execute   identifier  o  getname    context execute tree child    
        execute child getchild 0  gettext stackfunction bstfunction stackfunction tree stack    
            localtree   stack tree gettree localtree  
          
 
         override execute bstentry context i   0  i   localtree getchildcount    i      
 
                tree c   localtree getchild i c gettype bstparser string s   c gettext    
                        push s substring 1  s length   - 1 bstparser integer  
                        push integer parseint c gettext   substring 1 bstparser quoted  
                        push identifier c gettext   substring 1 bstparser stack  
                        push c vm execute c gettext    context vmexception e file logger error  error     e getmessage            c getline logger error  error     e getmessage            file getpath         
                                  c getline e push tree t    
        stack push t execute name  bstentry context context context getfields   containskey name     
                stack push context getfields   get name context localstrings containskey name     
                stack push context localstrings get name context localintegers containskey name     
                stack push context localintegers get name strings containskey name     
            stack push strings get name integers containskey name     
            stack push integers get name functions containskey name     
              
            functions get name  execute context vmexception  no matching identifier found      name function tree child name   child getchild 0  gettext    
        tree localstack   child getchild 1   
        functions put name stackfunction localstack integers tree child    
        tree t   child getchild 0 i   0  i   t getchildcount    i name   t getchild i  gettext    
            integers put name  0 strings tree child    
        tree t   child getchild 0 i   0  i   t getchildcount    i name   t getchild i  gettext    
            strings put name bstentry bstentry bibentry e entry   e map string  getfields fields bibentry getbibtexentry entry push integer integer    
        stack push integer push string    
        stack push push identifier identifier    
        stack push identifier map string  getstrings strings map integer  getintegers integers list bstentry  getentries entries map bstfunction  getfunctions functions stack object  getstack stack  
      
 
     override warn string    
        logger warn net sf jabref logic bst VM