 
    
   represents node tree  
    p  
   usually  tree nodes value property allows access value stored node contrast approach treenode t  class designed used base class provides tree traversing functionality via inheritance  
    p  
   example usage  
   private class basictreenode extends treenode basictreenode    
   public basictreenode     
   super basictreenode class   
     
     
    p class started out copy javax swing tree defaultmutabletreenode  
   
    param  t type class use some explicit casts form   t constructor ensures cast valid node's parent null node parent 
        
    
       array children  may empty node children never null  
        
    
       constructs tree node without parent children  
       
        param derivingclass class deriving treenode t always t class need parameter hard information means path root node node  
        p elements returned list represent child index each node path  starting root node root node returned list zero elements  
       
        return list numbers represent indexed path root node node descendant node indicated indexedpath  
        p path not traversed completely e  one child indices not exist empty optional returned  
       
        param indexedpath sequence child indices describe path node one descendants aware indexedpath obtained getindexedpathfromroot node usually root node  
        return descendant found evaluating indexedpath child index node parent  
        p node root unsupportedoperationexception thrown  
       use isroot method check case  
       
        return child index node parent 
        
    
       gets index specified child node's child list  
        p specified node not child node  returns empty optional method performs linear search o n n number children  
       
        param childnode node search node's children 
        return integer giving index node node's child list empty optional specified node not child node 
        throws nullpointerexception childnode null 
        
    
       gets number levels above node e distance root node  
        p node root  returns 0  
       
        return int giving number levels above node 
        
    
       returns number children node  
       
        return int giving number children node 
        
    
       removes node parent makes child specified node adding end children list way whole subtree based node moved given node  
       
        param target new parent 
        throws nullpointerexception target null 
        throws arrayindexoutofboundsexception targetindex out bounds 
        throws unsupportedoperationexception target descendant node 
        
    
       returns path root to node last element path node  
       
        return list nodes giving path first element path root last element node  
        
    
       returns next sibling node parent's children list  
       returns empty optional node parent parent's last child  
        p method performs linear search o n n number children traverse entire children collection  use parent's getchildren   instead  
       
        return sibling node immediately follows node 
        see #getchildren 
        
    
       returns previous sibling node parent's children list  
       returns empty optional node parent parent's first child  
        p method performs linear search o n n number children  
       
        return sibling node immediately precedes node 
        see #getchildren 
        
    
       returns sibling shiftindex away node  
        
    
       returns node's parent empty optional node parent  
       
        return node's parent t empty optional node parent 
        
    
       sets parent node node  
        p method not add node children collection new parent remove node old parent probably call moveto remove change tree  
       
        param parent new parent 
        
    
       returns child specified index node's children collection  
       
        param index index node's children collection 
        return node node's children collection specified index empty optional index not point child 
        
    
       returns whether specified index valid index child  
       
        param index index tested 
        return returns true index least 0 less count children 
        
    
       returns true node root tree root only node tree empty parent  every tree exactly one root  
       
        return true node root tree 
        
    
       returns true node ancestor given node  
        p node considered ancestor itself  
       
        param anothernode node test 
        return true anothernode descendant node 
        throws nullpointerexception anothernode null 
        see #isnodedescendant 
        
    
       returns root tree contains node root ancestor empty parent  
       thus node without parent considered root  
       
        return root tree contains node 
        
    
       returns true node children  
       
        return true node children 
        
    
       removes subtree rooted node tree  giving node empty parent nothing node root tree  
        
    
       removes node's children  setting parents empty node children method nothing  
        
    
       returns node's first child exists  otherwise returns empty optional   
       
        return first child node 
        
    
       returns node's last child exists  otherwise returns empty optional   
       
        return last child node 
        
    
       returns true anothernode descendant node node  one node's children descendant one node's children  
       note node considered descendant itself  
        p anothernode null exception thrown  
       
        param anothernode node test descendant node 
        return true node ancestor anothernode 
        see #isancestorof 
        
    
       gets forward-order list node's children  
        p returned list unmodifiable - use add remove methods modify nodes children changing nodes children example calling moveto reflected change list returned getchildren words  getchildren provides read-only view children not copy  
       
        return list node's children 
        
    
       removes given child node's child list  giving empty parent  
       
        param child child node remove 
        
    
       removes child specified index node's children sets node's parent empty  
        p nothing index not point child  
       
        param childindex index node's child array child remove 
        
    
       adds node end children collection sets parent given node node given node not allowed already tree e parent   
       
        param child node add 
        return child node 
        
    
       adds node given position children collection sets parent given node node given node not allowed already tree e parent   
       
        param child node add 
        param index position node added 
        return child node 
        throws indexoutofboundsexception index out range 
        
    
       removes children node makes child specified node adding specified position children list  
       
        param target new parent 
        param targetindex position children inserted 
        throws nullpointerexception target null 
        throws arrayindexoutofboundsexception targetindex out bounds 
        throws unsupportedoperationexception target descendant one children node 
        
    
       sorts list children according order induced specified   link comparator   
        p children must mutually comparable using specified comparator code c compare e1  e2   must not throw code classcastexception any children   code e1 code e2 list   
       
        param comparator comparator used compare child nodes 
        param recursive true whole subtree sorted 
        throws nullpointerexception comparator null 
        
   nothing sort 
    
       removes node parent makes child specified node adding specified position children list way whole subtree based node moved given node  
       
        param target new parent 
        param targetindex position children inserted 
        throws nullpointerexception target null 
        throws arrayindexoutofboundsexception targetindex out bounds 
        throws unsupportedoperationexception target descendant node 
        
   check target node not ancestor node create loops tree 
   remove previous parent 
   add child 
    
       creates deep copy node children  
       
        return deep copy subtree 
        
    
       creates copy node  completely separated tree e children parent  
       
        return deep copy node function invoked something changed subtree nothing       
    
       adds given function list subscribers notified something changes subtree following events supported text parentheses specifies node passed source   
        - addchild  new parent  
        - removechild  old parent  
        - move  old parent new parent  
        param subscriber function invoked upon change 
        
    
       helper method notifies subscribers change subtree bubbles event parents  
        param source node changed 
        net sf jabref model groups  
 
  
  
  
  
  
  
  
 
  
  
 suppresswarnings  unchecked treenode t treenode t treenode t  derivingclass    
        parent children arraylist derivingclass isinstance unsupportedoperationexception  the extending treenode t  has to derive from t list integer  getindexedpathfromroot parent arraylist      
          
 
        list integer  path   parent getindexedpathfromroot    
        path add getpositioninparent path optional t  getdescendant list integer  indexedpath    
        t cursor    t index   indexedpath    
            optional t  child   cursor getchildat index child ispresent      
                cursor   child get optional empty optional of cursor getpositioninparent getparent   orelsethrow unsupportedoperationexception  roots have no position in parent    
                 getindexofchild  t get optional integer  getindexofchild t childnode    
        objects requirenonnull childnode index   children indexof childnode index    -1 optional empty optional of index getlevel parent 0 parent getlevel     1 getnumberofchildren children size moveto t target    
        objects requirenonnull target   
 
        optional t  oldparent   getparent oldparent ispresent       oldparent get      target moveto target  target getnumberofchildren   - 1 moveto target  target getnumberofchildren list t  getpathfromroot parent list t  pathtome arraylist      
            pathtome add  t pathtome  
          
 
        list t  path   parent getpathfromroot    
        path add  t path optional t  getnextsibling getrelativesibling  1 optional t  getprevioussibling getrelativesibling -1 optional t  getrelativesibling shiftindex parent optional empty indexinparent   getpositioninparent indextarget   indexinparent   shiftindex parent childindexexists indextarget parent getchildat indextarget optional empty optional t  getparent optional ofnullable parent setparent t parent parent   parent optional t  getchildat index childindexexists index  ? optional of children get index     optional empty childindexexists index index    0      index   children size isroot parent isancestorof t anothernode    
        objects requirenonnull anothernode anothernode t child   children child isancestorof anothernode t getroot parent t parent getroot isleaf getnumberofchildren      0 removefromparent parent parent removechild  t removeallchildren getnumberofchildren     0    
            removechild 0 optional t  getfirstchild getchildat 0 optional t  getlastchild getchildat children size   - 1 isnodedescendant t anothernode    
        objects requirenonnull anothernode isancestorof anothernode list t  getchildren collections unmodifiablelist children removechild t child    
        objects requirenonnull child   
 
        children remove child   
        child setparent notifyaboutdescendantchange  t removechild childindex    
        optional t  child   getchildat childindex child ispresent      
            children remove childindex   
            child get   setparent notifyaboutdescendantchange  t t addchild t child addchild child  children size t addchild t child index    
        objects requirenonnull child child getparent   ispresent unsupportedoperationexception  cannot add a node which already has a parent  use moveto instead    
          
 
        child setparent  t children add index  child   
 
        notifyaboutdescendantchange  t child moveallchildrento t target targetindex getnumberofchildren     0    
            getlastchild   get   moveto target  targetindex sortchildren comparator t  comparator recursive    
        objects requirenonnull comparator isleaf j   getnumberofchildren   - 1 lastmodified j   0    
            lastmodified   j   1  
            j   -1 i   1  i   lastmodified    i    
                t child1   getchildat i - 1  get    
                t child2   getchildat i  get comparator compare child1  child2    0    
                    child1 moveto  t i   
                    j   i recursive t child   getchildren      
                child sortchildren comparator moveto t target targetindex    
        objects requirenonnull target isancestorof target unsupportedoperationexception  the target cannot be a descendant of node    
          
 
          
        optional t  oldparent   getparent oldparent ispresent      
            oldparent get   removechild  t target addchild  t targetindex t copysubtree     
        t copy   copynode t child   getchildren      
            child copysubtree   moveto copy copy t copynode consumer t  ondescendantchanged   t subscribetodescendantchanged consumer t  subscriber    
        ondescendantchanged   ondescendantchanged andthen subscriber notifyaboutdescendantchange t source    
        ondescendantchanged accept source isroot      
            parent notifyaboutdescendantchange source   
          
      
 